plugins {
    alias(libs.plugins.spring.boot)
}

apply plugin: 'io.spring.dependency-management'

dependencies {

    // 其他子项目
    api project(':playground-include')

    // spring-boot and spring
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    compileOnly 'org.springframework:spring-context-indexer'
    annotationProcessor 'org.springframework:spring-context-indexer'

    // spring-security
    testImplementation 'org.springframework.security:spring-security-test'

    // spring-retry
    implementation 'org.springframework.retry:spring-retry'

    // spring-turbo
    implementation(libs.spring.turbo)
    implementation(libs.spring.turbo.conf)
    implementation(libs.spring.turbo.jackson)
    implementation(libs.spring.turbo.webmvc)
    implementation(libs.spring.turbo.webcli)
    implementation(libs.spring.turbo.security)
    implementation(libs.spring.turbo.jwt)
    implementation(libs.spring.turbo.misc)
    implementation(libs.spring.turbo.redis)

    // DB相关
    implementation(libs.mysql)
    implementation(libs.p6spy.spring.boot)
    implementation(libs.bundles.mybatis)

    // flywaydb
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'

    // redisson / redlock
    implementation(libs.redisson.redlock.spring.boot)

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // mapstruct
    implementation(libs.mapstruct)
    annotationProcessor(libs.mapstruct)

    // 通用工具
    implementation 'org.apache.commons:commons-lang3:3.17.0'
    implementation 'org.apache.commons:commons-text:1.13.0'
    implementation 'commons-codec:commons-codec:1.17.1'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'commons-io:commons-io:2.18.0'
    implementation 'org.apache.commons:commons-pool2'
    implementation('com.google.guava:guava:33.4.0-jre') {
        transitive = false
    }

    // findbugs
    compileOnly(libs.findbugs)
}

jar {
    enabled = false
}

springBoot {
    buildInfo {
        enabled = false
    }
}

bootJar {
    manifest {
        attributes(['Start-Class': 'com.github.yingzhuo.playground.ApplicationBoot',
                    'Main-Class' : 'org.springframework.boot.loader.launch.PropertiesLauncher'])
    }

    archiveFileName = "playground-${rootProject.version}.${archiveExtension.get()}"

    includeTools = false

    layered {
        enabled = false
    }

    def excludePatterns = [
            '**/.DS_Store',
            '**/.gitkeep',
            '**/junit-*.jar',
            '**/mockito-*.jar',
            '**/opentest4j-*.jar',
            '**/spring-test-*.jar',
            '**/spring-boot-test-*.jar',
            '**/spring-boot-configuration-processor-*.jar',
            '**/spring-security-test-*.jar',
            '**/log4j-api-*.jar',
            '**/log4j-to-slf4j-*.jar'
    ]

    if (project.hasProperty('build-for-prod')) {
        excludePatterns += [
                '**/logback-spring.xml',
                '**/application-dev.y?ml'
        ]
    }

    excludes = excludePatterns

}

test {
    useJUnitPlatform()
}
