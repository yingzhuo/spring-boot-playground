plugins {
    alias(libs.plugins.spring.boot)
}

apply plugin: 'io.spring.dependency-management'

dependencies {

    // 其他子项目
    api project(':playground-include')

    // spring-boot and spring
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    compileOnly 'org.springframework:spring-context-indexer'
    annotationProcessor 'org.springframework:spring-context-indexer'

    // spring-security
    testImplementation 'org.springframework.security:spring-security-test'

    // spring-retry
    implementation 'org.springframework.retry:spring-retry'

    // spring-turbo
    implementation(libs.spring.turbo)
    implementation(libs.spring.turbo.conf)
    implementation(libs.spring.turbo.jackson)
    implementation(libs.spring.turbo.webmvc)
    implementation(libs.spring.turbo.webcli)
    implementation(libs.spring.turbo.security)
    implementation(libs.spring.turbo.jwt)
    implementation(libs.spring.turbo.misc)
    implementation(libs.spring.turbo.redis)

    // 对象池
    implementation('org.apache.commons:commons-pool2')

    // DB相关
    implementation(libs.mysql) // jdbc驱动
    implementation(libs.p6spy.spring.boot) // sql格式化输出
    implementation(libs.bundles.mybatis)

    // redisson / redlock
    implementation(libs.redisson.redlock.spring.boot)

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // mapstruct
    implementation(libs.mapstruct)
    annotationProcessor(libs.mapstruct)

    // findbugs
    compileOnly(libs.findbugs)
}

jar {
    enabled = false
}

springBoot {
    buildInfo {
        enabled = false
    }
}

bootJar {
    manifest {
        attributes(['Start-Class': 'com.github.yingzhuo.playground.ApplicationBoot'])
    }

    archiveFileName = "playground-${rootProject.version}.${archiveExtension.get()}"

    includeTools = false

    layered {
        enabled = false
    }

    excludes = ['**/.DS_Store',
                '**/.gitkeep',
                '**/junit-*.jar',
                '**/mockito-*.jar',
                '**/spring-test-*.jar',
                '**/spring-boot-test-*.jar',
                '**/spring-security-test-*.jar']

}

test {
    useJUnitPlatform()
}
